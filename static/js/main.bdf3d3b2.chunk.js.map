{"version":3,"sources":["signderiva-logo.png","lib/tpl-simple.js","lib/sources.js","App.js","reportWebVitals.js","index.js"],"names":["Footer","Layout","Header","Content","Sider","template","className","this","props","children","Component","cryptoMachines","__prepare","machine","a","performance","platform","key","value","rate","Wh","fuelSources","name","unit","kwh","co2","meca","source","srcLink","Option","Select","numeralLocales","machines","hardriveResidence","tykleFuelSim","state","input","result","combus","prepare","locale","step","lifetime","Date","machineId","nodes","validationAuthority","model","exportable","simulation","transactionSize","difficulty","dailyNewNode","dailyNewTransaction","tyklePerVision","sim","transactions","blocks","size","energy","distriEnergy","distriRequests","fuels","paperFuels","backup","export","rr","__life","setTimeout","bind","clearTimeout","getMachine","simAddNode","simAddTransaction","upToChain","_micro_hash","_micro_sign","_micro_verify","Math","round","totalEnergy","nlife","setDate","getDate","energyFormat","prefix","sizeFormat","transactionsFormat","distriEnergyFormat","distriRequestsFormat","totalEnergyFormat","fuel","insert","isNaN","co2Format","toFixed","push","paperNeeded","floor","paperPower","paperPowerFormat","price","saved","savedPrice","savedFormat","surfaces","update","prevSim","getMonth","exportMarkup","process","date","steps","VA","total","data","refresh","inputState","resultState","retrieveInt","pi","parseInt","hasOwnProperty","l","numeral","progress","weight","transaction","setState","gutter","xs","sm","layout","initialValues","Item","label","onChange","target","checkedChildren","unCheckedChildren","checked","onClick","organized","differential","field","position","last","length","diff","line","b","dataRaw","dataReadable","insertRaw","insertReadable","insertReadableTT","wb","XLSX","book_new","wsRaw","aoa_to_sheet","wsReadable","book_append_sheet","type","disabled","placeholder","map","index","showSearch","optionFilterProp","filterOption","option","toLowerCase","indexOf","Object","entries","validateStatus","nodesError","help","validationAuthorityError","transactionSizeError","dailyNewNodeError","dailyNewTransactionError","tyklePerVisionError","toDate","picker","moment","toString","strokeColor","from","to","status","percent","_total_transaction","format","style","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bdf3d3b2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/signderiva-logo.7706b15d.png\";","import React, { Component } from 'react'\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport '../App.css';\nimport logo from '../signderiva-logo.png'\n\nimport {\n    Layout,\n    Select,\n    Menu\n} from 'antd';\n\nconst { Header, Footer, Sider, Content } = Layout;\n\nexport class template extends Component {\n    render() {\n        return (\n            <Layout className=\"sd-tpl-simple-layout\">\n\n                <Content className=\"sd-tpl-simple-content\">\n                    {this.props.children}\n                </Content>\n                <Footer className=\"sd-tpl-simple-footer\"></Footer>\n\n            </Layout>\n        )\n    }\n}\n\nexport default template\n","export const cryptoMachines = [\n  // {\n  //   name: 'Apple Macbook Pro 16\" i9 2019',\n  //   Wh: 95,\n  //   performance: {\n  //     javascript: {\n  //       sign: 1100 * 8 * 60 * 60,\n  //       verify: 530 * 8 * 60 * 60,\n  //       hash: 7144 * 8 * 60 * 60 // 3k data\n  //     },\n  //     native: {\n  //       sign: 2200 * 8 * 60 * 60,\n  //       verify: 1920 * 8 * 60 * 60,\n  //       hash: 111150 * 8 * 60 * 60 // 3k data\n  //     },\n  //   }\n  // },\n\n  {\n    \"name\": \"Apple Inc. MacBookPro16,1 Core™ i9-9880H\",\n    \"weight\": 1,\n    \"Wh\": 45,\n    \"cores\": 8,\n    \"performance\": {\n      \"javascript\": {\n        \"hash\": 327623388,\n        \"sign\": 36082759,\n        \"verify\": 16594903\n      },\n      \"native\": {\n        \"hash\": 3145000300,\n        \"sign\": 63083658,\n        \"verify\": 60363418\n      }\n    },\n    \"raw\": {\n      \"date\": \"2020-12-06T09:23:41.711Z\",\n      \"performance\": {\n        \"javascript\": {\n          \"hash\": {\n            \"counter\": 22763,\n            \"diff\": 2001\n          },\n          \"sign\": {\n            \"counter\": 2507,\n            \"diff\": 2001\n          },\n          \"verify\": {\n            \"counter\": 1153,\n            \"diff\": 2001\n          }\n        },\n        \"native\": {\n          \"hash\": {\n            \"counter\": 218512,\n            \"diff\": 2001\n          },\n          \"sign\": {\n            \"counter\": 4383,\n            \"diff\": 2001\n          },\n          \"verify\": {\n            \"counter\": 4194,\n            \"diff\": 2001\n          }\n        }\n      },\n      \"cpu\": {\n        \"manufacturer\": \"Intel®\",\n        \"brand\": \"Core™ i9-9880H\",\n        \"vendor\": \"GenuineIntel\",\n        \"family\": \"6\",\n        \"model\": \"158\",\n        \"stepping\": \"13\",\n        \"revision\": \"\",\n        \"voltage\": \"\",\n        \"speed\": \"2.30\",\n        \"speedmin\": \"2.30\",\n        \"speedmax\": \"2.30\",\n        \"governor\": \"\",\n        \"cores\": 16,\n        \"physicalCores\": 8,\n        \"processors\": 1,\n        \"socket\": \"\",\n        \"cache\": {\n          \"l1d\": 32768,\n          \"l1i\": 32768,\n          \"l2\": 262144,\n          \"l3\": 16777216\n        }\n      },\n      \"cpuFlags\": \"fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clfsh ds acpi mmx fxsr sse sse2 ss htt tm pbe sse3 pclmulqdq dtes64 mon dscpl vmx smx est tm2 ssse3 fma cx16 tpr pdcm sse4.1 sse4.2 x2apic movbe popcnt aes pcid xsave osxsave seglim64 tsctmr avx1.0 rdrand f16c\",\n      \"cpuCurrentspeed\": 2.3,\n      \"system\": {\n        \"manufacturer\": \"Apple Inc.\",\n        \"model\": \"MacBookPro16,1\",\n        \"version\": \"1.0\",\n        \"serial\": \"C02D27CHMD6T\",\n        \"uuid\": \"B2AF2F91-89B0-58B2-9BFC-38C7B5E34A1C\",\n        \"sku\": \"Mac-E1008331FDC96864\"\n      },\n      \"battery\": {\n        \"hasbattery\": true,\n        \"cyclecount\": 35,\n        \"ischarging\": false,\n        \"designedcapacity\": 110754,\n        \"maxcapacity\": 100724,\n        \"currentcapacity\": 99968,\n        \"voltage\": 12.6,\n        \"capacityUnit\": \"mWh\",\n        \"percent\": 100,\n        \"timeremaining\": 0,\n        \"acconnected\": true,\n        \"type\": \"Li-ion\",\n        \"model\": \"\",\n        \"manufacturer\": \"Apple\",\n        \"serial\": \"\"\n      }\n    }\n  },\n\n  {\n    \"name\": \"Intel Corporation S1200SP Xeon® E3-1270 v6\",\n    \"weight\": 1,\n    \"Wh\": 72,\n    \"cores\": 4,\n    \"performance\": {\n     \"javascript\": {\n      \"hash\": 164135532,\n      \"sign\": 18170915,\n      \"verify\": 8343656\n     },\n     \"native\": {\n      \"hash\": 1349857871,\n      \"sign\": 29598801,\n      \"verify\": 34859370\n     }\n    },\n    \"raw\": {\n     \"date\": \"2020-12-06T09:26:01.675Z\",\n     \"performance\": {\n      \"javascript\": {\n       \"hash\": {\n        \"counter\": 22808,\n        \"diff\": 2001\n       },\n       \"sign\": {\n        \"counter\": 2525,\n        \"diff\": 2001\n       },\n       \"verify\": {\n        \"counter\": 1160,\n        \"diff\": 2002\n       }\n      },\n      \"native\": {\n       \"hash\": {\n        \"counter\": 187574,\n        \"diff\": 2001\n       },\n       \"sign\": {\n        \"counter\": 4113,\n        \"diff\": 2001\n       },\n       \"verify\": {\n        \"counter\": 4844,\n        \"diff\": 2001\n       }\n      }\n     },\n     \"cpu\": {\n      \"manufacturer\": \"Intel®\",\n      \"brand\": \"Xeon® E3-1270 v6\",\n      \"vendor\": \"GenuineIntel\",\n      \"family\": \"6\",\n      \"model\": \"158\",\n      \"stepping\": \"9\",\n      \"revision\": \"\",\n      \"voltage\": \"\",\n      \"speed\": \"3.80\",\n      \"speedmin\": \"0.80\",\n      \"speedmax\": \"4.20\",\n      \"governor\": \"powersave\",\n      \"cores\": 8,\n      \"physicalCores\": 4,\n      \"processors\": 1,\n      \"socket\": \"\",\n      \"cache\": {\n       \"l1d\": 32768,\n       \"l1i\": 32768,\n       \"l2\": 262144,\n       \"l3\": 8388608\n      }\n     },\n     \"cpuFlags\": \"fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch epb invpcid_single intel_pt ssbd ibrs ibpb stibp pti tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm mpx rdseed adx smap clflushopt xsaveopt xsavec xgetbv1 dtherm ida arat pln pts hwp hwp_notify hwp_act_window hwp_epp md_clear flush_l1d\",\n     \"cpuCurrentspeed\": 3.8,\n     \"system\": {\n      \"manufacturer\": \"Intel Corporation\",\n      \"model\": \"S1200SP\",\n      \"version\": \"....................\",\n      \"serial\": \"............\",\n      \"uuid\": \"F186522A-9812-E711-B330-A4BF0120419E\",\n      \"sku\": \"SKU Number\"\n     },\n     \"battery\": {\n      \"hasbattery\": false,\n      \"cyclecount\": 0,\n      \"ischarging\": false,\n      \"designedcapacity\": 0,\n      \"maxcapacity\": 0,\n      \"currentcapacity\": 0,\n      \"voltage\": 0,\n      \"capacityUnit\": \"\",\n      \"percent\": 0,\n      \"timeremaining\": -1,\n      \"acconnected\": true,\n      \"type\": \"\",\n      \"model\": \"\",\n      \"manufacturer\": \"\",\n      \"serial\": \"\"\n     }\n    }\n   },\n\n\n   {\n    \"name\": \"Supermicro Super Server Xeon® D-1521\",\n    \"weight\": 1,\n    \"Wh\": 45,\n    \"cores\": 4,\n    \"performance\": {\n     \"javascript\": {\n      \"hash\": 137458471,\n      \"sign\": 12630569,\n      \"verify\": 5790210\n     },\n     \"native\": {\n      \"hash\": 1115255172,\n      \"sign\": 20358621,\n      \"verify\": 23244378\n     }\n    },\n    \"raw\": {\n     \"date\": \"2020-12-06T09:35:31.101Z\",\n     \"performance\": {\n      \"javascript\": {\n       \"hash\": {\n        \"counter\": 19101,\n        \"diff\": 2001\n       },\n       \"sign\": {\n        \"counter\": 1756,\n        \"diff\": 2002\n       },\n       \"verify\": {\n        \"counter\": 805,\n        \"diff\": 2002\n       }\n      },\n      \"native\": {\n       \"hash\": {\n        \"counter\": 154974,\n        \"diff\": 2001\n       },\n       \"sign\": {\n        \"counter\": 2829,\n        \"diff\": 2001\n       },\n       \"verify\": {\n        \"counter\": 3230,\n        \"diff\": 2001\n       }\n      }\n     },\n     \"cpu\": {\n      \"manufacturer\": \"Intel®\",\n      \"brand\": \"Xeon® D-1521\",\n      \"vendor\": \"GenuineIntel\",\n      \"family\": \"6\",\n      \"model\": \"86\",\n      \"stepping\": \"3\",\n      \"revision\": \"\",\n      \"voltage\": \"\",\n      \"speed\": \"2.40\",\n      \"speedmin\": \"0.80\",\n      \"speedmax\": \"2.70\",\n      \"governor\": \"powersave\",\n      \"cores\": 8,\n      \"physicalCores\": 4,\n      \"processors\": 1,\n      \"socket\": \"\",\n      \"cache\": {\n       \"l1d\": 32768,\n       \"l1i\": 32768,\n       \"l2\": 262144,\n       \"l3\": 6291456\n      }\n     },\n     \"cpuFlags\": \"fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch epb intel_pt tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm rdseed adx smap xsaveopt cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm ida arat pln pts\",\n     \"cpuCurrentspeed\": 2.4,\n     \"system\": {\n      \"manufacturer\": \"Supermicro\",\n      \"model\": \"Super Server\",\n      \"version\": \"0123456789\",\n      \"serial\": \"0123456789\",\n      \"uuid\": \"00000000-0000-0000-0000-0CC47A944C00\",\n      \"sku\": \"-\"\n     },\n     \"battery\": {\n      \"hasbattery\": false,\n      \"cyclecount\": 0,\n      \"ischarging\": false,\n      \"designedcapacity\": 0,\n      \"maxcapacity\": 0,\n      \"currentcapacity\": 0,\n      \"voltage\": 0,\n      \"capacityUnit\": \"\",\n      \"percent\": 0,\n      \"timeremaining\": -1,\n      \"acconnected\": true,\n      \"type\": \"\",\n      \"model\": \"\",\n      \"manufacturer\": \"\",\n      \"serial\": \"\"\n     }\n    }\n   }\n   \n   \n]\n\nfunction __prepare(machine) {\n  for (var a in machine.performance) {\n    const platform = machine.performance[a];\n    for (var key in platform) {\n      const value = platform[key];\n      const rate = (machine.Wh * 1000 * 1000) / value; // µWh\n      platform[`_micro_${key}`] = rate;\n    }\n  }\n}\nfor (var a in cryptoMachines) __prepare(cryptoMachines[a])\n\nexport const fuelSources = [\n  {\n    name: \"Essence\",\n    unit: \"l\",\n    kwh: 9.63,\n    co2: 2542,\n    meca: 0.34,\n    source: \"Wikipedia\",\n    srcLink: \"https://fr.wikipedia.org/wiki/Discussion:Empreinte_carbone\"\n  },\n  {\n    name: \"Diesel\",\n    unit: \"l\",\n    kwh: 10.74,\n    co2: 2899,\n    meca: 0.40,\n    source: \"Wikipedia\",\n    srcLink: \"https://fr.wikipedia.org/wiki/Discussion:Empreinte_carbone\"\n  },\n  {\n    name: \"Charbon\",\n    unit: \"kg\",\n    kwh: 8.1,\n    co2: 356 * 8.1,\n    meca: 0.45,\n    source: \"Wikipedia\",\n    srcLink: \"http://www.verslautonomieenergetique.fr/detail-calcul-bilan-carbone-combustibles/\"\n  },\n  // {\n  //   name: \"Ethereum\",\n  //   unit: \"ETH\",\n  //   kwh: 33358127.8118005 / 1000 / 1000,\n  //   meca: 0.45,\n  //   co2: 356 * (33358127.8118005 / 1000 / 1000),\n  //   source: \"Web\",\n  //   srcLink: \"http://www.cleancoins.io/#/info\"\n  // },\n\n  // {\n  //   name: \"Bitcoin\",\n  //   unit: \"BTC\",\n  //   kwh: 1074148224 / 1000 / 1000,\n  //   meca: 0.45,\n  //   co2: 356 * (1074148224 / 1000 / 1000),\n  //   source: \"Web\",\n  //   srcLink: \"https://nomics.com/markets/btc-bitcoin/kwh-kwhcoin\"\n  // },\n  {\n    name: \"Solaire\",\n    unit: \"m2\",\n    kwh: 1500 / 10 / 8760,\n    meca: 1\n  },\n\n  {\n    name: \"Gaz Propane\",\n    unit: \"Kg\",\n    kwh: 13.8,\n    meca: 0.40,\n    source: \"Pouvoir calorifique des combustibles\"\n  },\n  {\n    name: \"Gaz Butane\",\n    unit: \"Kg\",\n    kwh: 13.7,\n    meca: 0.40,\n    source: \"Pouvoir calorifique des combustibles\"\n  }\n]","import { Component } from 'react';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport './App.css';\n\nimport Template from './lib/tpl-simple'\n\nimport moment from 'moment';\n\nimport numeral from 'numeral';\nimport \"numeral/locales/fr\";\nimport \"numeral/locales/fr-ch\";\nimport \"numeral/locales/fr-ca\";\n\nimport prefix from 'metric-prefix';\n\nimport * as XLSX from 'xlsx';\n\nimport { Card, Row, Col } from 'antd';\n\nimport {\n    Layout,\n    Form,\n    Input,\n    Switch,\n    Select,\n    DatePicker,\n    Button,\n    Progress,\n    Space\n} from 'antd';\n\nimport { fuelSources, cryptoMachines } from './lib/sources'\n\nconst { Header, Footer, Sider, Content } = Layout;\nconst { Option } = Select;\n\nconst numeralLocales = [\n    {\n        name: \"English\",\n        key: \"en\"\n    },\n    {\n        name: \"Francais\",\n        key: \"fr\"\n    },\n    {\n        name: \"Francais Suisse\",\n        key: \"fr-ch\"\n    },\n    {\n        name: \"Francais Canada\",\n        key: \"fr-ca\"\n    }\n]\n\n/*\nLe client arrive et hash() et sign()\nContact 5 noeuds qui vont hash() verify() sign() circulairement\n5 autres noeuds sont la pour témoigner en suivant ( hash() verify() ) * 5 et relay()\nLe message se propage et tous le monde va ( hash() verify() ) * 5 a terme\n*/\nconst machines = cryptoMachines\n\nconst hardriveResidence = 10 / (250 * 1024 * 1024 * 1024)\n\nexport default class tykleFuelSim extends Component {\n\n    constructor() {\n        super()\n\n        this.state = {\n            input: {},\n            result: {\n                combus: []\n            }\n        }\n\n        this.state = this.prepare({\n            locale: 0,\n            step: 0,\n            lifetime: new Date(),\n            machineId: 0,\n            nodes: 100,\n            validationAuthority: 15,\n            model: \"native\",\n\n            exportable: false,\n            simulation: false,\n            transactionSize: 3000,\n            difficulty: 2,\n            // dailyNewNode: Math.round(150000 / 5 / 365),\n            dailyNewNode: 50,\n            // dailyNewTransaction: Math.round(350000000 * 0.3 / 5 / 365),\n            dailyNewTransaction: 50000,\n            tyklePerVision: 450000,\n\n            sim: {\n                transactions: 0,\n                blocks: 10,\n                size: 0,\n                energy: 0,\n                distriEnergy: 0,\n                distriRequests: 0,\n                fuels: [],\n                paperFuels: []\n            }\n        })\n\n        this.backup = { ...this.state }\n        this.export = []\n        this.rr = 0\n    }\n\n    componentDidMount() {\n        this.__life = setTimeout(this.simulation.bind(this), 4000 / 12)\n    }\n\n    componentDidUpdate() {\n        if (this.__life) {\n            clearTimeout(this.__life)\n            delete this.__life;\n        }\n        if (this.state.input.simulation === true) {\n            this.__life = setTimeout(this.simulation.bind(this), 4000 / 12)\n        }\n    }\n\n    // sortir\n    // energy\n    // taille \n    simulation() {\n        if (this.state.input.simulation === false) return;\n\n        const result = { ...this.state.input.sim }\n\n        const getMachine = () => {\n            const machine = machines[this.rr]\n            if (!machine) {\n                this.rr = 0;\n                return (getMachine())\n            }\n            this.rr++;\n            return (machine)\n        }\n\n        // node\n        for (var a = 0; a < this.state.input.dailyNewNode; a++) {\n            const machine = getMachine()\n            const model = machine.performance[this.state.input.model]\n\n            this.simAddNode(machine, model, result)\n        }\n\n        // add transaction\n        for (var a = 0; a < this.state.input.dailyNewTransaction; a++) {\n            const machine = getMachine()\n            const model = machine.performance[this.state.input.model]\n\n            this.simAddTransaction(machine, model, result)\n        }\n\n        // add transaction\n        {\n            const machine = getMachine()\n            const model = machine.performance[this.state.input.model]\n\n            var upToChain = model._micro_hash + model._micro_sign\n            for (var a = 0; a < 6; a++) {\n                const machine = machines[this.state.input.machineId]\n                if (!machine) return;\n                const model = machine.performance[this.state.input.model]\n                upToChain += model._micro_verify\n            }\n        }\n\n        // block residence\n        result.energy += hardriveResidence * result.size * 24 * this.state.input.nodes\n\n        // every day 10% transaction distributed\n        result.distriEnergy += Math.round(result.transactions * 3 * upToChain) // 5 = remonter la chaine\n        result.distriRequests += Math.round(result.transactions * 3)\n        result.totalEnergy = result.distriEnergy + result.energy;\n\n        // date\n        const nlife = this.state.input.lifetime;\n        nlife.setDate(nlife.getDate() + 1)\n\n        result.energyFormat = prefix.prefix(result.energy / 1000 / 1000, { unit: \"Wh\" })\n        result.sizeFormat = prefix.prefix(result.size, { unit: \"B\" })\n        result.transactionsFormat = prefix.prefix(result.transactions, { unit: \"Tr\" })\n\n        result.distriEnergyFormat = prefix.prefix(result.distriEnergy / 1000 / 1000, { unit: \"Wh\" })\n        result.distriRequestsFormat = prefix.prefix(result.distriRequests, { unit: \"Req\" })\n        result.totalEnergyFormat = prefix.prefix(result.totalEnergy / 1000 / 1000, { unit: \"Wh\" })\n\n        // process source fuel for production kwh\n        result.fuels = []\n        for (var a in fuelSources) {\n            const fuel = fuelSources[a];\n            if (!fuel.co2) continue;\n            const insert = { name: fuel.name }\n            insert.co2 = result.totalEnergy / 1000 / 1000 / 1000\n            insert.co2 *= (fuel.co2 * (2 - fuel.meca)) / fuel.kwh\n\n            if (!isNaN(insert.co2))\n                insert.co2Format = `${(insert.co2 / 1000 / 1000).toFixed(2)} T`\n\n            // {prefix.prefix((this.state.input.sim.totalEnergy / 1000--$ / 1000 / 1000)*(value.co2 * (1 + value.meca)))}\n            result.fuels.push(insert)\n        }\n\n        // process paper computation\n        result.paperNeeded = Math.floor(result.blocks * 0.1 * this.state.input.tyklePerVision / 15)\n        result.paperPower = result.blocks * 0.1 * this.state.input.tyklePerVision / 15 * 17\n        result.paperPowerFormat = prefix.prefix(result.paperPower, { unit: \"Wh\" })\n\n\n        result.paperFuels = []\n        for (var a in fuelSources) {\n            const fuel = fuelSources[a];\n            if (!fuel.co2) continue;\n            const insert = { name: fuel.name }\n            insert.co2 = result.paperPower / 1000\n            insert.co2 *= (fuel.co2 * (2 - fuel.meca)) / fuel.kwh\n\n            insert.price = insert.co2 / 1000 / 1000 * 13.1 // cost of 1t of co2\n\n            insert.saved = insert.co2 - result.fuels[a].co2\n            insert.savedPrice = insert.saved * insert.price / insert.co2;\n\n            if (!isNaN(insert.co2)) {\n                // insert.co2Format = `${(insert.co2 / 1000 / 1000).toFixed(2)} T`\n                // insert.savedFormat = `${(insert.saved / 1000 / 1000).toFixed(2)} T`\n\n                insert.co2Format = prefix.prefix(insert.co2 / 1000 / 1000, { unit: \"T\" })\n                insert.savedFormat = prefix.prefix(insert.saved / 1000 / 1000, { unit: \"T\" })\n            }\n\n            // {prefix.prefix((this.state.input.sim.totalEnergy / 1000 / 1000 / 1000)*(value.co2 * (1 + value.meca)))}\n            result.paperFuels.push(insert)\n        }\n\n        // processing surface information\n        result.surfaces = Math.round(result.size / (4 * 1000))\n\n        // prepare returned result \n        const update = {\n            // nodes\n            nodes: this.state.input.nodes + this.state.input.dailyNewNode,\n            sim: result,\n            lifetime: nlife,\n            step: ++this.state.input.step\n        }\n\n        // process monthly state\n        if (!this.prevSim || this.prevSim.getMonth() != nlife.getMonth()) {\n            // console.log(this.prevSim ? this.prevSim.getMonth():null, nlife.getMonth(), this.state.input.step)\n            this.exportMarkup(nlife, { ...this.state })\n        }\n\n        this.prevSim = new Date(nlife)\n\n        // console.log(this.state.input.step++)\n        this.process(update)\n        this.__life = setTimeout(this.simulation.bind(this), 1000 / 12)\n    }\n\n    exportMarkup(date, state) {\n        this.export.push({ date, state })\n    }\n\n    simAddNode(machine, model, result) {\n        // process difficulty\n        result.energy += (model._micro_hash + model._micro_verify) * result.blocks\n\n        // sign from source\n        result.energy += model._micro_hash + model._micro_sign\n        result.size += 1000;\n        result.blocks += 1;\n\n        // sign from provider & cot x 2 (chainned)\n        result.energy += (model._micro_hash + model._micro_sign) * 2\n        result.size += 1000 * 2;\n        result.blocks += 2;\n    }\n\n    simAddTransaction(machine, model, result, state) {\n        if (!state) state = this.state\n\n        if (!result) {\n            result = {\n                steps: [],\n                energy: 0,\n                size: 0,\n                blocks: 0,\n                transactions: 0\n            }\n        }\n\n        const VA = state.input.validationAuthority;\n\n        result.transactions++;\n\n        // \"Le client arrive et hash() et sign()\"\n        result.energy += model._micro_hash + model._micro_sign\n        result.size += 3000;\n        result.blocks += 1;\n        if (result.steps) {\n            result.steps.push({\n                name: \"Client initiate block transaction\",\n                energy: model._micro_hash + model._micro_sign,\n                size: 3000,\n                total: result.energy,\n                blocks: 1,\n            })\n        }\n\n\n        // il paye\n        result.energy += model._micro_hash + model._micro_verify + model._micro_sign\n        result.size += 200;\n        result.blocks += 1;\n        if (result.steps) {\n            result.steps.push({\n                name: \"Payin Operation\",\n                energy: model._micro_hash + model._micro_verify + model._micro_sign,\n                size: 200,\n                total: result.energy,\n                blocks: 1\n            })\n        }\n\n\n        // `Contact ${inputState.validationAuthority} noeuds qui vont hash() verify() sign() circulairement`\n        result.energy += (model._micro_hash + model._micro_verify + model._micro_sign) * VA * 3\n        if (result.steps) {\n            result.steps.push({\n                name: \"Operations with Workers\",\n                energy: (model._micro_hash + model._micro_verify + model._micro_sign) * VA * 3, // 3 worker space for spare\n                total: result.energy,\n            })\n        }\n\n\n        // `${inputState.validationAuthority} autres noeuds sont la pour témoigner en suivant ( hash() verify() ) * ${inputState.validationAuthority}`\n        result.energy += (model._micro_hash + model._micro_verify + model._micro_sign) * VA\n        if (result.steps) {\n            result.steps.push({\n                name: \"Witness operation\",\n                energy: (model._micro_hash + model._micro_verify + model._micro_sign) * VA,\n                total: result.energy,\n            })\n        }\n\n\n        // `Le message se propage et tous le monde va ( hash() verify() )`\n        result.energy += (model._micro_hash + model._micro_verify) * VA * (state.input.nodes - VA * 2)\n        if (result.steps) {\n            result.steps.push({\n                name: \"Block Broadcasting\",\n                energy: (model._micro_hash + model._micro_verify) * VA * (state.input.nodes - VA * 2),\n                total: result.energy,\n            })\n        }\n\n\n        result.energy += hardriveResidence * state.input.sim.size * state.input.nodes\n        if (result.steps) {\n            result.steps.push({\n                name: \"Harddrive Residence\",\n                energy: hardriveResidence * state.input.sim.size * state.input.nodes,\n                total: result.energy,\n            })\n        }\n\n        return (result)\n    }\n\n    prepare(data) {\n        var refresh = null;\n\n        const inputState = { ...this.state.input }\n        const resultState = { ...this.state.result }\n\n        function retrieveInt(name) {\n            const pi = parseInt(data[name]);\n\n            if (!isNaN(pi)) {\n                inputState[name] = pi\n                refresh = true\n            }\n        }\n\n        retrieveInt(\"difficulty\")\n        retrieveInt(\"locale\")\n        retrieveInt(\"machineId\")\n        retrieveInt(\"validationAuthority\")\n        retrieveInt(\"transactionSize\")\n        retrieveInt(\"dailyNewNode\")\n        retrieveInt(\"dailyNewTransaction\")\n        retrieveInt(\"nodes\")\n        retrieveInt(\"tyklePerVision\")\n\n        // result \n        if (data.hasOwnProperty(\"model\")) {\n            inputState.model = data.model\n            refresh = true\n        }\n        if (data.hasOwnProperty(\"lifetime\")) {\n            inputState.lifetime = data.lifetime\n            refresh = true\n        }\n        if (data.hasOwnProperty(\"simulation\")) {\n            inputState.simulation = data.simulation\n            refresh = true\n        }\n\n        if (data.hasOwnProperty(\"locale\")) {\n            inputState.locale = data.locale;\n            const l = numeralLocales[inputState.locale];\n            if (l) {\n                numeral.locale(l.key);\n                // console.log(\"Change locale\", inputState.locale, l);\n            }\n            \n        }\n\n        if (data.hasOwnProperty(\"exportable\")) {\n            inputState.exportable = data.exportable\n        }\n\n        if (data.hasOwnProperty(\"step\")) {\n            inputState.step = parseInt(data.step)\n            resultState.progress = inputState.step * 100 / (5 * 365)\n\n            if (resultState.progress >= 100) {\n                inputState.exportable = false;\n                inputState.simulation = false;\n                refresh = true;\n            }\n        }\n\n        if (data.hasOwnProperty(\"sim\")) {\n            inputState.sim = data.sim\n        }\n\n        const machine = machines[inputState.machineId]\n\n        if (data.hasOwnProperty(\"weight\") && machine) {\n            machine.weight = data.weight\n        }\n        if (refresh === true) {\n\n            if (!machine) return (null)\n\n            const model = machine.performance[inputState.model]\n\n            const sim = this.simAddTransaction(machine, model, null, { input: inputState })\n\n            resultState.transaction = sim.steps\n\n            resultState[`_total_transaction`] = sim.energy;\n\n\n        }\n\n        return ({\n            input: inputState,\n            result: resultState\n        })\n    }\n\n    process(data) {\n        var refresh = this.prepare(data)\n\n        // refresh\n        if (refresh !== null) {\n            this.setState(refresh)\n        }\n    }\n\n    render() {\n        const machine = machines[this.state.input.machineId]\n\n        const changeTyklePerVision = ({ target }) => {\n            this.process({\n                tyklePerVision: target.value,\n            })\n        }\n\n        const changeNodes = ({ target }) => {\n            this.process({\n                nodes: target.value,\n            })\n        }\n\n        const changeValidation = ({ target }) => {\n            this.process({\n                validationAuthority: target.value,\n            })\n        }\n\n        const changeDailyNewNode = ({ target }) => {\n            this.process({\n                dailyNewNode: target.value,\n            })\n        }\n\n        const changeDailyNewTransaction = ({ target }) => {\n            this.process({\n                dailyNewTransaction: target.value,\n            })\n        }\n\n        const changeTransactionSize = ({ target }) => {\n            this.process({\n                transactionSize: target.value,\n            })\n        }\n\n        const changeModel = (target) => {\n            this.process({\n                model: target,\n            })\n        }\n\n        const changeDateSimulation = (target) => {\n            if (!target) return;\n            this.process({\n                lifetime: target.toDate(),\n            })\n        }\n\n        const switchSimulation = (target) => {\n            this.process({\n                simulation: target,\n            })\n        }\n\n        const changeReset = ({ target }) => {\n            this.export = []\n            this.setState(this.backup)\n        }\n\n        const changeLocale = (target) => {\n            this.process({\n                locale: target,\n            })\n        }\n\n        const changeMachine = (target) => {\n            this.process({\n                machineId: target,\n            })\n        }\n\n        const changeWeight = ({ target }) => {\n            this.process({\n                weight: target.value,\n            })\n        }\n\n        const exportClick = ({ target }) => {\n            const organized = {}\n\n            function differential(field, value, unit) {\n                if (!organized[field]) organized[field] = []\n                const position = organized[field]\n\n                var last = position[position.length - 1]\n                if (!last) {\n                    last = {\n                        diff: 0,\n                        value: 0\n                    }\n                }\n                if (isNaN(value)) {\n                    position.push({\n                        diff: 0,\n                        value: 0,\n                        unit\n                    })\n                }\n                else {\n                    position.push({\n                        diff: value - last.value,\n                        value: value,\n                        unit\n                    })\n                }\n\n            }\n\n            // prepapre the export\n            for (var a in this.export) {\n                const line = this.export[a];\n\n\n                differential(\"Nodes in network\", line.state.input.nodes)\n                differential(\"Number of blocks\", line.state.input.sim.blocks)\n                differential(\"Number of transactions\", line.state.input.sim.transactions)\n                differential(\"Tykle Vision or Right\", line.state.input.sim.blocks * 0.1)\n\n                differential(\"Tykle Chain Size\", line.state.input.sim.size, \"B\")\n                differential(\"Required Tykle Surface\", line.state.input.sim.surfaces)\n                differential(\"Distributed Trust Request\", line.state.input.sim.distriRequests)\n\n                differential(\"Total Energy\", line.state.input.sim.energy / 1000 / 1000, \"Wh\")\n\n                differential(\"Bitcoin Energy Equivalence\", line.state.input.sim.transactions * 741 * 1000 / 1000 / 1000, \"Wh\")\n                differential(\"Ethereum Energy Equivalence\", line.state.input.sim.transactions * 34 * 1000 / 1000 / 1000, \"Wh\")\n                differential(\"Visa Energy Equivalence\", line.state.input.sim.transactions * (149 * 1000 / 100000) / 1000 / 1000, \"Wh\")\n\n                // fuel\n                if (line.state.input.sim.fuels.length > 0) {\n                    for (var b in line.state.input.sim.fuels) {\n                        const fuel = line.state.input.sim.fuels[b]\n                        differential(`${fuel.name} CO2 Emission`, fuel.co2, \"Tco2\")\n                    }\n                }\n                else {\n                    for (var b in fuelSources) {\n                        const fuel = fuelSources[b]\n                        if (fuel.co2) differential(`${fuel.name} CO2 Emission`, 0, \"Tco2\")\n                    }\n                }\n            }\n\n            var dataRaw = []\n            const dataReadable = []\n\n            // prepare data in xls\n            for (var key in organized) {\n                const line = organized[key];\n                const insertRaw = [key]\n                const insertReadable = [key]\n                const insertReadableTT = [key]\n\n                for (var a in line) {\n                    const position = line[a]\n\n                    insertRaw.push(position.diff)\n\n                    if (position.unit) {\n                        insertReadable.push(`+ ${prefix.prefix(position.diff, { unit: position.unit })}`)\n                        insertReadableTT.push(`${prefix.prefix(position.value, { unit: position.unit })}`)\n                    }\n                    else {\n                        insertReadable.push(`+ ${position.diff}`)\n                        insertReadableTT.push(position.value)\n                    }\n                }\n\n                dataRaw.push(insertRaw)\n                // dataReadable.push(insertReadable)\n                dataReadable.push(insertReadableTT)\n            }\n\n            var wb = XLSX.utils.book_new();\n            var wsRaw = XLSX.utils.aoa_to_sheet(dataRaw);\n            var wsReadable = XLSX.utils.aoa_to_sheet(dataReadable);\n\n            /* add worksheet to workbook */\n            XLSX.utils.book_append_sheet(wb, wsRaw, \"Raw\");\n            XLSX.utils.book_append_sheet(wb, wsReadable, \"Readable\");\n\n            var filename = \"write.xlsx\";\n            XLSX.writeFile(wb, filename);\n\n        }\n\n\n        return (\n\n            <Template>\n                <Row gutter={2}>\n                    <Col xs={24} sm={6}>\n                        <Card>\n                            <h1>Simulation Model A</h1>\n                            <small>December 2020</small>\n                            <Form name=\"complex-form\" layout=\"vertical\" initialValues={this.state.input}>\n                                <Form.Item label=\"Simulation\">\n                                    <Space>\n                                        <Switch onChange={switchSimulation} checkedChildren=\"Working\" unCheckedChildren=\"Paused\" checked={this.state.input.simulation} />\n                                        <Button onClick={changeReset}>Reset</Button>\n                                        <Button onClick={exportClick} type=\"primary\" disabled={this.state.input.exportable}>Export Simulation</Button>\n                                    </Space>\n\n                                </Form.Item>\n\n                                <Form.Item label=\"Locale Notation\">\n                                    <Select\n                                        placeholder=\"Select a locale\"\n                                        onChange={changeLocale}\n                                        value={this.state.input.locale}\n                                    >\n                                        {numeralLocales.map((value, index) => (\n                                            <Option value={index} key={`locales-${index}`}>{value.name}</Option>\n                                        ))}\n                                    </Select>\n                                </Form.Item>\n\n                                <Form.Item label=\"Machine Preset\">\n                                    <Select\n                                        showSearch\n                                        placeholder=\"Select a machine\"\n                                        optionFilterProp=\"children\"\n                                        onChange={changeMachine}\n                                        value={this.state.input.machineId}\n                                        filterOption={(input, option) =>\n                                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                        }\n                                    >\n                                        {machines.map((value, index) => (\n                                            <Option value={index} key={`machine-${index}`}>{value.name}</Option>\n                                        ))}\n                                    </Select>\n                                </Form.Item>\n\n                                <Form.Item label=\"Platform model\">\n                                    <Select\n                                        showSearch\n                                        placeholder=\"Select a platform model\"\n                                        optionFilterProp=\"children\"\n                                        onChange={changeModel}\n                                        value={this.state.input.model}\n                                        filterOption={(input, option) =>\n                                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                        }\n                                    >\n                                        {Object.entries(machine.performance).map((value, index) => (\n                                            <Option value={value[0]} key={`performance-${index}`}>{value[0]}</Option>\n                                        ))}\n                                    </Select>\n                                </Form.Item>\n\n                                <Form.Item\n                                    label=\"Weight in simulation\"\n                                >\n                                    <Input placeholder=\"Please input\" onChange={changeWeight} value={machine.weight} />\n                                </Form.Item>\n\n                                <Form.Item\n                                    label=\"Number of nodes in the network\"\n                                    validateStatus={this.state.input.nodesError}\n                                    help={this.state.input.nodesError}\n                                >\n                                    <Input placeholder=\"Please input\" onChange={changeNodes} value={this.state.input.nodes} />\n                                </Form.Item>\n\n                                <Form.Item\n                                    label=\"Number of validation authorities\"\n                                    validateStatus={this.state.input.validationAuthorityError}\n                                    help={this.state.input.validationAuthorityError}\n                                >\n                                    <Input placeholder=\"Please input\" onChange={changeValidation} value={this.state.input.validationAuthority} />\n                                </Form.Item>\n\n                                <Form.Item\n                                    label=\"Average Transaction Size\"\n                                    validateStatus={this.state.input.transactionSizeError}\n                                    help={this.state.input.transactionSizeError}\n                                >\n                                    <Input placeholder=\"Please input\" onChange={changeTransactionSize} value={this.state.input.transactionSize} />\n                                </Form.Item>\n\n                                <Form.Item\n                                    label=\"Daily New Nodes\"\n                                    validateStatus={this.state.input.dailyNewNodeError}\n                                    help={this.state.input.dailyNewNodeError}\n                                >\n                                    <Input placeholder=\"Please input\" onChange={changeDailyNewNode} value={this.state.input.dailyNewNode} />\n                                </Form.Item>\n\n                                <Form.Item\n                                    label=\"Daily Transactions\"\n                                    validateStatus={this.state.input.dailyNewTransactionError}\n                                    help={this.state.input.dailyNewTransactionError}\n                                >\n                                    <Input placeholder=\"Please input\" onChange={changeDailyNewTransaction} value={this.state.input.dailyNewTransaction} />\n                                </Form.Item>\n\n                                <Form.Item\n                                    label=\"Number of Tykle per Vision\"\n                                    validateStatus={this.state.input.tyklePerVisionError}\n                                    help={this.state.input.tyklePerVisionError}\n                                >\n                                    <Input placeholder=\"Please input\" onChange={changeTyklePerVision} value={this.state.input.tyklePerVision} />\n                                </Form.Item>\n\n                                <Form.Item\n                                    label=\"Simulation Date\"\n                                >\n                                    <DatePicker onChange={changeDateSimulation} picker=\"month\" value={moment(this.state.input.lifetime)} />\n                                </Form.Item>\n\n                            </Form>\n                        </Card>\n                    </Col>\n\n\n\n                    <Col xs={24} sm={18}>\n\n\n                        <Card>\n                            <small>\n                                {this.state.input.lifetime.toString()}\n                            </small>\n\n                            <Progress\n                                strokeColor={{\n                                    from: '#108ee9',\n                                    to: '#87d068',\n                                }}\n                                status={this.state.input.simulation === true ? \"active\" : null}\n                                percent={this.state.result.progress.toFixed(2)}\n                            />\n\n                        </Card>\n\n\n                        <Card>\n                            <h1>{machine.name}</h1>\n                            <Row gutter={2}>\n                                <Col xs={24} sm={6} className=\"sim-block\">\n                                    <h1>Power per transaction</h1>\n                                    <h2>{prefix.prefix(this.state.result._total_transaction / 1000 / 1000, { unit: \"Wh\" })}</h2>\n                                </Col>\n\n\n                                {/* <li key={`transaction-${index}`}>{value.name} (+{value.energy} µWh) = {value.total} µWh <small>difficulty: {value.difficulty}</small></li> */}\n\n                                {this.state.result.transaction.map((value, index) => (\n                                    <Col xs={24} sm={6} className=\"sim-block\" key={`per-transaction-${index}`}>\n                                        <h1>{value.name}</h1>\n\n                                        <h2>+{prefix.prefix(value.energy / 1000 / 1000, { unit: \"Wh\" })} <small>{prefix.prefix(value.total / 1000 / 1000, { unit: \"Wh\" })}</small></h2>\n                                    </Col>\n                                ))}\n\n                            </Row>\n\n                        </Card>\n\n                        <Card>\n                            <h1>Simulation</h1>\n\n                            <Row gutter={2}>\n                                <Col xs={24} sm={6} className=\"sim-block\">\n                                    <h1>Number of blocks</h1>\n                                    <h2>{numeral(this.state.input.sim.blocks).format()}</h2>\n                                </Col>\n\n                                <Col xs={24} sm={6} className=\"sim-block\">\n                                    <h1>Number of Tykle Vision or Tykle Right</h1>\n                                    <h2>{numeral(this.state.input.sim.blocks * 0.01).format()}</h2>\n                                </Col>\n\n                                <Col xs={24} sm={6} className=\"sim-block\">\n                                    <h1>Number of transactions</h1>\n                                    <h2>{this.state.input.sim.transactions}</h2>\n                                </Col>\n\n                                <Col xs={24} sm={6} className=\"sim-block\">\n                                    <h1>Tykle Chain Size</h1>\n                                    <h2>{this.state.input.sim.sizeFormat}</h2>\n                                </Col>\n\n                                <Col xs={24} sm={6} className=\"sim-block\">\n                                    <h1>Energy consumed by the Tykle Chain</h1>\n                                    <h2>{this.state.input.sim.energyFormat}</h2>\n                                </Col>\n\n                                <Col xs={24} sm={6} className=\"sim-block\">\n                                    <h1>Distributed Trusted Request for players</h1>\n                                    <h2>{this.state.input.sim.distriRequestsFormat}</h2>\n                                </Col>\n\n                                <Col xs={24} sm={6} className=\"sim-block\">\n                                    <h1>Energy consumed to distribute requests</h1>\n                                    <h2>{this.state.input.sim.distriEnergyFormat}</h2>\n                                </Col>\n\n                                <Col xs={24} sm={6} className=\"sim-block\">\n                                    <h1 style={{ color: \"#d48806\" }}>Required Surfaces</h1>\n                                    <h2 style={{ color: \"#d48806\" }}>{numeral(this.state.input.sim.surfaces).format()}</h2>\n                                </Col>\n\n                                <Col xs={24} sm={6} className=\"sim-block\">\n                                    <h1 style={{ color: \"#cf1322\" }}>Total Energy</h1>\n                                    <h2 style={{ color: \"#cf1322\" }}>{this.state.input.sim.totalEnergyFormat}</h2>\n                                </Col>\n\n                                <Col xs={24} sm={6} className=\"sim-block\">\n                                    <h1 style={{ color: \"#389e0d\" }}>Bitcoin Energy Equivalence</h1>\n                                    <h2 style={{ color: \"#389e0d\" }}>{prefix.prefix(this.state.input.sim.transactions * 741 * 1000, { unit: 'Wh' })}</h2>\n                                </Col>\n\n                                <Col xs={24} sm={6} className=\"sim-block\">\n                                    <h1 style={{ color: \"#389e0d\" }}>Ethereum Energy Equivalence</h1>\n                                    <h2 style={{ color: \"#389e0d\" }}>{prefix.prefix(this.state.input.sim.transactions * 34 * 1000, { unit: 'Wh' })}</h2>\n                                </Col>\n\n                                <Col xs={24} sm={6} className=\"sim-block\">\n                                    <h1 style={{ color: \"#389e0d\" }}>Visa Energy Equivalence</h1>\n                                    <h2 style={{ color: \"#389e0d\" }}>{prefix.prefix(this.state.input.sim.transactions * (149 * 1000 / 100000), { unit: 'Wh' })}</h2>\n                                </Col>\n                                {/* co2 burnt */}\n\n                            </Row>\n\n                        </Card>\n\n                        <Card>\n                            <h1>CO2 Production following fuel sources</h1>\n                            <p>\n                                Here we are talking about the CO2 emitted by different fuels to produce the energy needed to run the Tykle Chain.\n                </p>\n                            <Row gutter={2}>\n                                {this.state.input.sim.fuels.map((value, index) => (\n                                    this.state.input.sim.totalEnergy && (\n                                        <Col xs={24} sm={6} className=\"sim-block\" key={`co2-prod-${index}`}>\n                                            <h1>{value.name}</h1>\n                                            <h2>{value.co2Format}</h2>\n                                        </Col>\n                                    )\n                                ))}\n\n                            </Row>\n                        </Card>\n\n                        <Card>\n                            <h1>A4 Paper</h1>\n\n                At production, an A4 paper costs (without printing) 17 Wh of energy. It is normally possible to apply 5*3 (15) Tykle per A4 paper. Thus 1 Tykle costs 1 Wh printed..\n\n                A transaction corresponds to the inscription of a right or a Tykle vision in the blockchain and this one will make on average {this.state.input.tyklePerVision} Tykle.\n\n                The idea of this simulation is to measure the level of co2 saved by using the Tykle Chain\n\n                <Row>\n                                <Col xs={24} sm={6} className=\"sim-block\">\n                                    <h1>A4 Paper Equivalence</h1>\n                                    <h2>{numeral(this.state.input.sim.paperNeeded).format()}</h2>\n                                </Col>\n\n                                <Col xs={24} sm={6} className=\"sim-block\">\n                                    <h1 style={{ color: \"#389e0d\" }}>Trees Saved</h1>\n                                    <h2 style={{ color: \"#389e0d\" }}>{numeral(this.state.input.sim.paperNeeded / 16666).format()}</h2>\n                                </Col>\n\n                                <Col xs={24} sm={6} className=\"sim-block\">\n                                    <h1 style={{ color: \"#cf1322\" }}>Energy to produce paper</h1>\n                                    <h2 style={{ color: \"#cf1322\" }}>{this.state.input.sim.paperPowerFormat}</h2>\n                                </Col>\n\n                                {this.state.input.sim.paperFuels[0] && (\n                                    <>\n\n\n                                        <Col xs={24} sm={6} className=\"sim-block\">\n                                            <h1>Price of 1 Surface indexed to CO2</h1>\n                                            <h2>{numeral((this.state.input.sim.paperFuels[0].savedPrice / (this.state.input.sim.blocks * 0.05))).format(\"0.000\")} €</h2>\n                                        </Col>\n                                        <Col xs={24} sm={6} className=\"sim-block\">\n                                            <h1>Value of Tykle Surface indexed to CO2</h1>\n                                            <h2>{numeral((this.state.input.sim.surfaces * ((this.state.input.sim.paperFuels[0].savedPrice / (this.state.input.sim.blocks * 0.05))))).format()} €</h2>\n                                        </Col>\n                                    </>\n                                )}\n\n\n                                {this.state.input.sim.paperFuels.map((value, index) => (\n                                    this.state.input.sim.totalEnergy && (\n                                        <Col xs={24} sm={6} className=\"sim-block\" key={`a4-prod-${index}`}>\n                                            <h1>{value.name}</h1>\n\n                                            <h2>{value.savedFormat} <small>({numeral(value.savedPrice).format()} €)</small></h2>\n                                            {/* <h3>{value.co2Format} <small>({value.price.toFixed(2)} €)</small></h3> */}\n                                            {/* <h2>{(value.co2 * (1 + value.meca))}</h2> */}\n                                        </Col>\n                                    )\n                                ))}\n                            </Row>\n                        </Card>\n\n\n\n\n                    </Col>\n                </Row>\n            </Template>\n        )\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}